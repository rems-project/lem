(*******************************************************************)
(* A new machine word library, suitable for targetting from Sail,  *)
(* and a thin wrapper around the HOL and Isabelle word libraries.  *)
(*******************************************************************)

declare {isabelle;coq;hol;ocaml} rename module = Lem_machine_word

open import Bool Num Basic_classes Show Function

open import {isabelle} `Lem` `HOL-Library.Word` `Word_Lib.Generic_set_bit` `Word_Lib.Reversed_Bit_Lists` `Word_Lib.Signed_Division_Word`
open import {hol} `wordsTheory` `wordsLib` `bitstringTheory` `integer_wordTheory`

type mword 'a
declare isabelle target_sorts mword = `len`

class (Size 'a)
  val size : nat
end

declare isabelle target_rep type mword 'a = `Word.word` 'a
declare hol      target_rep type mword 'a = `words$word` 'a
declare ocaml    target_rep type mword 'a = `Lem.mword`

val native_size : forall 'a. nat
declare hol      target_rep function native_size = `dimindex` (`the_value` : `itself` 'a)
declare isabelle target_rep function native_size = `len_of` (`TYPE(_)` : `itself` 'a)

let inline {isabelle;hol} size = native_size

val ocaml_inject : forall 'a. nat * natural -> mword 'a
declare ocaml target_rep function ocaml_inject = `Lem.machine_word_inject`

(* A singleton type family that can be used to carry a size as the type parameter *)

type itself 'a
declare isabelle target_sorts itself = `len`
declare hol      target_rep type itself 'a = `itself` 'a
declare isabelle target_rep type itself 'a = `itself` 'a
declare ocaml    target_rep type itself 'a = `unit`

val the_value : forall 'a. itself 'a
declare hol      target_rep function the_value = `the_value`
declare isabelle target_rep function the_value = `TYPE(_)`
declare ocaml    target_rep function the_value = `()`

val size_itself : forall 'a. Size 'a => itself 'a -> nat
let size_itself x = size

(*******************************************************************)
(* Fixed bitwidths extracted from Anthony's models.                *)
(*                                                                 *)
(* If you need a size N that is not included here, put the lines   *)
(*                                                                 *)
(* type tyN                                                        *)
(* instance (Size tyN) let size = N end                            *)
(* declare isabelle target_rep type tyN = `N`                      *)
(* declare hol target_rep type tyN = `N`                           *)
(*                                                                 *)
(* in your project, replacing N in each line.                      *)
(*******************************************************************)

type ty1
type ty2
type ty3
type ty4
type ty5
type ty6
type ty7
type ty8
type ty9
type ty10
type ty11
type ty12
type ty13
type ty14
type ty15
type ty16
type ty17
type ty18
type ty19
type ty20
type ty21
type ty22
type ty23
type ty24
type ty25
type ty26
type ty27
type ty28
type ty29
type ty30
type ty31
type ty32
type ty33
type ty34
type ty35
type ty36
type ty37
type ty38
type ty39
type ty40
type ty41
type ty42
type ty43
type ty44
type ty45
type ty46
type ty47
type ty48
type ty49
type ty50
type ty51
type ty52
type ty53
type ty54
type ty55
type ty56
type ty57
type ty58
type ty59
type ty60
type ty61
type ty62
type ty63
type ty64
type ty65
type ty66
type ty67
type ty68
type ty69
type ty70
type ty71
type ty72
type ty73
type ty74
type ty75
type ty76
type ty77
type ty78
type ty79
type ty80
type ty81
type ty82
type ty83
type ty84
type ty85
type ty86
type ty87
type ty88
type ty89
type ty90
type ty91
type ty92
type ty93
type ty94
type ty95
type ty96
type ty97
type ty98
type ty99
type ty100
type ty101
type ty102
type ty103
type ty104
type ty105
type ty106
type ty107
type ty108
type ty109
type ty110
type ty111
type ty112
type ty113
type ty114
type ty115
type ty116
type ty117
type ty118
type ty119
type ty120
type ty121
type ty122
type ty123
type ty124
type ty125
type ty126
type ty127
type ty128
type ty129
type ty130
type ty131
type ty132
type ty133
type ty134
type ty135
type ty136
type ty137
type ty138
type ty139
type ty140
type ty141
type ty142
type ty143
type ty144
type ty145
type ty146
type ty147
type ty148
type ty149
type ty150
type ty151
type ty152
type ty153
type ty154
type ty155
type ty156
type ty157
type ty158
type ty159
type ty160
type ty161
type ty162
type ty163
type ty164
type ty165
type ty166
type ty167
type ty168
type ty169
type ty170
type ty171
type ty172
type ty173
type ty174
type ty175
type ty176
type ty177
type ty178
type ty179
type ty180
type ty181
type ty182
type ty183
type ty184
type ty185
type ty186
type ty187
type ty188
type ty189
type ty190
type ty191
type ty192
type ty193
type ty194
type ty195
type ty196
type ty197
type ty198
type ty199
type ty200
type ty201
type ty202
type ty203
type ty204
type ty205
type ty206
type ty207
type ty208
type ty209
type ty210
type ty211
type ty212
type ty213
type ty214
type ty215
type ty216
type ty217
type ty218
type ty219
type ty220
type ty221
type ty222
type ty223
type ty224
type ty225
type ty226
type ty227
type ty228
type ty229
type ty230
type ty231
type ty232
type ty233
type ty234
type ty235
type ty236
type ty237
type ty238
type ty239
type ty240
type ty241
type ty242
type ty243
type ty244
type ty245
type ty246
type ty247
type ty248
type ty249
type ty250
type ty251
type ty252
type ty253
type ty254
type ty255
type ty256
type ty257
type ty288
type ty320
type ty352
type ty384
type ty416
type ty448
type ty480
type ty512
type ty640
type ty768
type ty896
type ty1024
type ty1152
type ty1280
type ty1408
type ty1536
type ty1664
type ty1792
type ty1920
type ty2048
type ty2304
type ty2560
type ty2816
type ty3072
type ty3328
type ty3584
type ty3840
type ty4096
type ty4608
type ty6400
type ty8192
type ty9216
type ty12800
type ty12544
type ty16384
type ty18432
type ty20736
type ty25088
type ty25600
type ty30976
type ty32768
type ty36864
type ty41472
type ty43264
type ty50176
type ty51200
type ty57600
type ty61952
type ty65536
type ty73728
type ty86528
type ty100352
type ty115200
type ty131072
type ty262144

instance (Size ty1) let size = 1 end
instance (Size ty2) let size = 2 end
instance (Size ty3) let size = 3 end
instance (Size ty4) let size = 4 end
instance (Size ty5) let size = 5 end
instance (Size ty6) let size = 6 end
instance (Size ty7) let size = 7 end
instance (Size ty8) let size = 8 end
instance (Size ty9) let size = 9 end
instance (Size ty10) let size = 10 end
instance (Size ty11) let size = 11 end
instance (Size ty12) let size = 12 end
instance (Size ty13) let size = 13 end
instance (Size ty14) let size = 14 end
instance (Size ty15) let size = 15 end
instance (Size ty16) let size = 16 end
instance (Size ty17) let size = 17 end
instance (Size ty18) let size = 18 end
instance (Size ty19) let size = 19 end
instance (Size ty20) let size = 20 end
instance (Size ty21) let size = 21 end
instance (Size ty22) let size = 22 end
instance (Size ty23) let size = 23 end
instance (Size ty24) let size = 24 end
instance (Size ty25) let size = 25 end
instance (Size ty26) let size = 26 end
instance (Size ty27) let size = 27 end
instance (Size ty28) let size = 28 end
instance (Size ty29) let size = 29 end
instance (Size ty30) let size = 30 end
instance (Size ty31) let size = 31 end
instance (Size ty32) let size = 32 end
instance (Size ty33) let size = 33 end
instance (Size ty34) let size = 34 end
instance (Size ty35) let size = 35 end
instance (Size ty36) let size = 36 end
instance (Size ty37) let size = 37 end
instance (Size ty38) let size = 38 end
instance (Size ty39) let size = 39 end
instance (Size ty40) let size = 40 end
instance (Size ty41) let size = 41 end
instance (Size ty42) let size = 42 end
instance (Size ty43) let size = 43 end
instance (Size ty44) let size = 44 end
instance (Size ty45) let size = 45 end
instance (Size ty46) let size = 46 end
instance (Size ty47) let size = 47 end
instance (Size ty48) let size = 48 end
instance (Size ty49) let size = 49 end
instance (Size ty50) let size = 50 end
instance (Size ty51) let size = 51 end
instance (Size ty52) let size = 52 end
instance (Size ty53) let size = 53 end
instance (Size ty54) let size = 54 end
instance (Size ty55) let size = 55 end
instance (Size ty56) let size = 56 end
instance (Size ty57) let size = 57 end
instance (Size ty58) let size = 58 end
instance (Size ty59) let size = 59 end
instance (Size ty60) let size = 60 end
instance (Size ty61) let size = 61 end
instance (Size ty62) let size = 62 end
instance (Size ty63) let size = 63 end
instance (Size ty64) let size = 64 end
instance (Size ty65) let size = 65 end
instance (Size ty66) let size = 66 end
instance (Size ty67) let size = 67 end
instance (Size ty68) let size = 68 end
instance (Size ty69) let size = 69 end
instance (Size ty70) let size = 70 end
instance (Size ty71) let size = 71 end
instance (Size ty72) let size = 72 end
instance (Size ty73) let size = 73 end
instance (Size ty74) let size = 74 end
instance (Size ty75) let size = 75 end
instance (Size ty76) let size = 76 end
instance (Size ty77) let size = 77 end
instance (Size ty78) let size = 78 end
instance (Size ty79) let size = 79 end
instance (Size ty80) let size = 80 end
instance (Size ty81) let size = 81 end
instance (Size ty82) let size = 82 end
instance (Size ty83) let size = 83 end
instance (Size ty84) let size = 84 end
instance (Size ty85) let size = 85 end
instance (Size ty86) let size = 86 end
instance (Size ty87) let size = 87 end
instance (Size ty88) let size = 88 end
instance (Size ty89) let size = 89 end
instance (Size ty90) let size = 90 end
instance (Size ty91) let size = 91 end
instance (Size ty92) let size = 92 end
instance (Size ty93) let size = 93 end
instance (Size ty94) let size = 94 end
instance (Size ty95) let size = 95 end
instance (Size ty96) let size = 96 end
instance (Size ty97) let size = 97 end
instance (Size ty98) let size = 98 end
instance (Size ty99) let size = 99 end
instance (Size ty100) let size = 100 end
instance (Size ty101) let size = 101 end
instance (Size ty102) let size = 102 end
instance (Size ty103) let size = 103 end
instance (Size ty104) let size = 104 end
instance (Size ty105) let size = 105 end
instance (Size ty106) let size = 106 end
instance (Size ty107) let size = 107 end
instance (Size ty108) let size = 108 end
instance (Size ty109) let size = 109 end
instance (Size ty110) let size = 110 end
instance (Size ty111) let size = 111 end
instance (Size ty112) let size = 112 end
instance (Size ty113) let size = 113 end
instance (Size ty114) let size = 114 end
instance (Size ty115) let size = 115 end
instance (Size ty116) let size = 116 end
instance (Size ty117) let size = 117 end
instance (Size ty118) let size = 118 end
instance (Size ty119) let size = 119 end
instance (Size ty120) let size = 120 end
instance (Size ty121) let size = 121 end
instance (Size ty122) let size = 122 end
instance (Size ty123) let size = 123 end
instance (Size ty124) let size = 124 end
instance (Size ty125) let size = 125 end
instance (Size ty126) let size = 126 end
instance (Size ty127) let size = 127 end
instance (Size ty128) let size = 128 end
instance (Size ty129) let size = 129 end
instance (Size ty130) let size = 130 end
instance (Size ty131) let size = 131 end
instance (Size ty132) let size = 132 end
instance (Size ty133) let size = 133 end
instance (Size ty134) let size = 134 end
instance (Size ty135) let size = 135 end
instance (Size ty136) let size = 136 end
instance (Size ty137) let size = 137 end
instance (Size ty138) let size = 138 end
instance (Size ty139) let size = 139 end
instance (Size ty140) let size = 140 end
instance (Size ty141) let size = 141 end
instance (Size ty142) let size = 142 end
instance (Size ty143) let size = 143 end
instance (Size ty144) let size = 144 end
instance (Size ty145) let size = 145 end
instance (Size ty146) let size = 146 end
instance (Size ty147) let size = 147 end
instance (Size ty148) let size = 148 end
instance (Size ty149) let size = 149 end
instance (Size ty150) let size = 150 end
instance (Size ty151) let size = 151 end
instance (Size ty152) let size = 152 end
instance (Size ty153) let size = 153 end
instance (Size ty154) let size = 154 end
instance (Size ty155) let size = 155 end
instance (Size ty156) let size = 156 end
instance (Size ty157) let size = 157 end
instance (Size ty158) let size = 158 end
instance (Size ty159) let size = 159 end
instance (Size ty160) let size = 160 end
instance (Size ty161) let size = 161 end
instance (Size ty162) let size = 162 end
instance (Size ty163) let size = 163 end
instance (Size ty164) let size = 164 end
instance (Size ty165) let size = 165 end
instance (Size ty166) let size = 166 end
instance (Size ty167) let size = 167 end
instance (Size ty168) let size = 168 end
instance (Size ty169) let size = 169 end
instance (Size ty170) let size = 170 end
instance (Size ty171) let size = 171 end
instance (Size ty172) let size = 172 end
instance (Size ty173) let size = 173 end
instance (Size ty174) let size = 174 end
instance (Size ty175) let size = 175 end
instance (Size ty176) let size = 176 end
instance (Size ty177) let size = 177 end
instance (Size ty178) let size = 178 end
instance (Size ty179) let size = 179 end
instance (Size ty180) let size = 180 end
instance (Size ty181) let size = 181 end
instance (Size ty182) let size = 182 end
instance (Size ty183) let size = 183 end
instance (Size ty184) let size = 184 end
instance (Size ty185) let size = 185 end
instance (Size ty186) let size = 186 end
instance (Size ty187) let size = 187 end
instance (Size ty188) let size = 188 end
instance (Size ty189) let size = 189 end
instance (Size ty190) let size = 190 end
instance (Size ty191) let size = 191 end
instance (Size ty192) let size = 192 end
instance (Size ty193) let size = 193 end
instance (Size ty194) let size = 194 end
instance (Size ty195) let size = 195 end
instance (Size ty196) let size = 196 end
instance (Size ty197) let size = 197 end
instance (Size ty198) let size = 198 end
instance (Size ty199) let size = 199 end
instance (Size ty200) let size = 200 end
instance (Size ty201) let size = 201 end
instance (Size ty202) let size = 202 end
instance (Size ty203) let size = 203 end
instance (Size ty204) let size = 204 end
instance (Size ty205) let size = 205 end
instance (Size ty206) let size = 206 end
instance (Size ty207) let size = 207 end
instance (Size ty208) let size = 208 end
instance (Size ty209) let size = 209 end
instance (Size ty210) let size = 210 end
instance (Size ty211) let size = 211 end
instance (Size ty212) let size = 212 end
instance (Size ty213) let size = 213 end
instance (Size ty214) let size = 214 end
instance (Size ty215) let size = 215 end
instance (Size ty216) let size = 216 end
instance (Size ty217) let size = 217 end
instance (Size ty218) let size = 218 end
instance (Size ty219) let size = 219 end
instance (Size ty220) let size = 220 end
instance (Size ty221) let size = 221 end
instance (Size ty222) let size = 222 end
instance (Size ty223) let size = 223 end
instance (Size ty224) let size = 224 end
instance (Size ty225) let size = 225 end
instance (Size ty226) let size = 226 end
instance (Size ty227) let size = 227 end
instance (Size ty228) let size = 228 end
instance (Size ty229) let size = 229 end
instance (Size ty230) let size = 230 end
instance (Size ty231) let size = 231 end
instance (Size ty232) let size = 232 end
instance (Size ty233) let size = 233 end
instance (Size ty234) let size = 234 end
instance (Size ty235) let size = 235 end
instance (Size ty236) let size = 236 end
instance (Size ty237) let size = 237 end
instance (Size ty238) let size = 238 end
instance (Size ty239) let size = 239 end
instance (Size ty240) let size = 240 end
instance (Size ty241) let size = 241 end
instance (Size ty242) let size = 242 end
instance (Size ty243) let size = 243 end
instance (Size ty244) let size = 244 end
instance (Size ty245) let size = 245 end
instance (Size ty246) let size = 246 end
instance (Size ty247) let size = 247 end
instance (Size ty248) let size = 248 end
instance (Size ty249) let size = 249 end
instance (Size ty250) let size = 250 end
instance (Size ty251) let size = 251 end
instance (Size ty252) let size = 252 end
instance (Size ty253) let size = 253 end
instance (Size ty254) let size = 254 end
instance (Size ty255) let size = 255 end
instance (Size ty256) let size = 256 end
instance (Size ty257) let size = 257 end
instance (Size ty288) let size = 288 end
instance (Size ty320) let size = 320 end
instance (Size ty352) let size = 352 end
instance (Size ty384) let size = 384 end
instance (Size ty416) let size = 416 end
instance (Size ty448) let size = 448 end
instance (Size ty480) let size = 480 end
instance (Size ty512) let size = 512 end
instance (Size ty640) let size = 640 end
instance (Size ty768) let size = 768 end
instance (Size ty896) let size = 896 end
instance (Size ty1024) let size = 1024 end
instance (Size ty1152) let size = 1152 end
instance (Size ty1280) let size = 1280 end
instance (Size ty1408) let size = 1408 end
instance (Size ty1536) let size = 1536 end
instance (Size ty1664) let size = 1664 end
instance (Size ty1792) let size = 1792 end
instance (Size ty1920) let size = 1920 end
instance (Size ty2048) let size = 2048 end
instance (Size ty2304) let size = 2304 end
instance (Size ty2560) let size = 2560 end
instance (Size ty2816) let size = 2816 end
instance (Size ty3072) let size = 3072 end
instance (Size ty3328) let size = 3328 end
instance (Size ty3584) let size = 3584 end
instance (Size ty3840) let size = 3840 end
instance (Size ty4096) let size = 4096 end
instance (Size ty4608) let size = 4608 end
instance (Size ty6400) let size = 6400 end
instance (Size ty8192) let size = 8192 end
instance (Size ty9216) let size = 9216 end
instance (Size ty12800) let size = 12800 end
instance (Size ty12544) let size = 12544 end
instance (Size ty16384) let size = 16384 end
instance (Size ty18432) let size = 18432 end
instance (Size ty20736) let size = 20736 end
instance (Size ty25088) let size = 25088 end
instance (Size ty25600) let size = 25600 end
instance (Size ty30976) let size = 30976 end
instance (Size ty32768) let size = 32768 end
instance (Size ty36864) let size = 36864 end
instance (Size ty41472) let size = 41472 end
instance (Size ty43264) let size = 43264 end
instance (Size ty50176) let size = 50176 end
instance (Size ty51200) let size = 51200 end
instance (Size ty57600) let size = 57600 end
instance (Size ty61952) let size = 61952 end
instance (Size ty65536) let size = 65536 end
instance (Size ty73728) let size = 73728 end
instance (Size ty86528) let size = 86528 end
instance (Size ty100352) let size = 100352 end
instance (Size ty115200) let size = 115200 end
instance (Size ty131072) let size = 131072 end
instance (Size ty262144) let size = 262144 end

declare isabelle target_rep type ty1 = `1`
declare isabelle target_rep type ty2 = `2`
declare isabelle target_rep type ty3 = `3`
declare isabelle target_rep type ty4 = `4`
declare isabelle target_rep type ty5 = `5`
declare isabelle target_rep type ty6 = `6`
declare isabelle target_rep type ty7 = `7`
declare isabelle target_rep type ty8 = `8`
declare isabelle target_rep type ty9 = `9`
declare isabelle target_rep type ty10 = `10`
declare isabelle target_rep type ty11 = `11`
declare isabelle target_rep type ty12 = `12`
declare isabelle target_rep type ty13 = `13`
declare isabelle target_rep type ty14 = `14`
declare isabelle target_rep type ty15 = `15`
declare isabelle target_rep type ty16 = `16`
declare isabelle target_rep type ty17 = `17`
declare isabelle target_rep type ty18 = `18`
declare isabelle target_rep type ty19 = `19`
declare isabelle target_rep type ty20 = `20`
declare isabelle target_rep type ty21 = `21`
declare isabelle target_rep type ty22 = `22`
declare isabelle target_rep type ty23 = `23`
declare isabelle target_rep type ty24 = `24`
declare isabelle target_rep type ty25 = `25`
declare isabelle target_rep type ty26 = `26`
declare isabelle target_rep type ty27 = `27`
declare isabelle target_rep type ty28 = `28`
declare isabelle target_rep type ty29 = `29`
declare isabelle target_rep type ty30 = `30`
declare isabelle target_rep type ty31 = `31`
declare isabelle target_rep type ty32 = `32`
declare isabelle target_rep type ty33 = `33`
declare isabelle target_rep type ty34 = `34`
declare isabelle target_rep type ty35 = `35`
declare isabelle target_rep type ty36 = `36`
declare isabelle target_rep type ty37 = `37`
declare isabelle target_rep type ty38 = `38`
declare isabelle target_rep type ty39 = `39`
declare isabelle target_rep type ty40 = `40`
declare isabelle target_rep type ty41 = `41`
declare isabelle target_rep type ty42 = `42`
declare isabelle target_rep type ty43 = `43`
declare isabelle target_rep type ty44 = `44`
declare isabelle target_rep type ty45 = `45`
declare isabelle target_rep type ty46 = `46`
declare isabelle target_rep type ty47 = `47`
declare isabelle target_rep type ty48 = `48`
declare isabelle target_rep type ty49 = `49`
declare isabelle target_rep type ty50 = `50`
declare isabelle target_rep type ty51 = `51`
declare isabelle target_rep type ty52 = `52`
declare isabelle target_rep type ty53 = `53`
declare isabelle target_rep type ty54 = `54`
declare isabelle target_rep type ty55 = `55`
declare isabelle target_rep type ty56 = `56`
declare isabelle target_rep type ty57 = `57`
declare isabelle target_rep type ty58 = `58`
declare isabelle target_rep type ty59 = `59`
declare isabelle target_rep type ty60 = `60`
declare isabelle target_rep type ty61 = `61`
declare isabelle target_rep type ty62 = `62`
declare isabelle target_rep type ty63 = `63`
declare isabelle target_rep type ty64 = `64`
declare isabelle target_rep type ty65 = `65`
declare isabelle target_rep type ty66 = `66`
declare isabelle target_rep type ty67 = `67`
declare isabelle target_rep type ty68 = `68`
declare isabelle target_rep type ty69 = `69`
declare isabelle target_rep type ty70 = `70`
declare isabelle target_rep type ty71 = `71`
declare isabelle target_rep type ty72 = `72`
declare isabelle target_rep type ty73 = `73`
declare isabelle target_rep type ty74 = `74`
declare isabelle target_rep type ty75 = `75`
declare isabelle target_rep type ty76 = `76`
declare isabelle target_rep type ty77 = `77`
declare isabelle target_rep type ty78 = `78`
declare isabelle target_rep type ty79 = `79`
declare isabelle target_rep type ty80 = `80`
declare isabelle target_rep type ty81 = `81`
declare isabelle target_rep type ty82 = `82`
declare isabelle target_rep type ty83 = `83`
declare isabelle target_rep type ty84 = `84`
declare isabelle target_rep type ty85 = `85`
declare isabelle target_rep type ty86 = `86`
declare isabelle target_rep type ty87 = `87`
declare isabelle target_rep type ty88 = `88`
declare isabelle target_rep type ty89 = `89`
declare isabelle target_rep type ty90 = `90`
declare isabelle target_rep type ty91 = `91`
declare isabelle target_rep type ty92 = `92`
declare isabelle target_rep type ty93 = `93`
declare isabelle target_rep type ty94 = `94`
declare isabelle target_rep type ty95 = `95`
declare isabelle target_rep type ty96 = `96`
declare isabelle target_rep type ty97 = `97`
declare isabelle target_rep type ty98 = `98`
declare isabelle target_rep type ty99 = `99`
declare isabelle target_rep type ty100 = `100`
declare isabelle target_rep type ty101 = `101`
declare isabelle target_rep type ty102 = `102`
declare isabelle target_rep type ty103 = `103`
declare isabelle target_rep type ty104 = `104`
declare isabelle target_rep type ty105 = `105`
declare isabelle target_rep type ty106 = `106`
declare isabelle target_rep type ty107 = `107`
declare isabelle target_rep type ty108 = `108`
declare isabelle target_rep type ty109 = `109`
declare isabelle target_rep type ty110 = `110`
declare isabelle target_rep type ty111 = `111`
declare isabelle target_rep type ty112 = `112`
declare isabelle target_rep type ty113 = `113`
declare isabelle target_rep type ty114 = `114`
declare isabelle target_rep type ty115 = `115`
declare isabelle target_rep type ty116 = `116`
declare isabelle target_rep type ty117 = `117`
declare isabelle target_rep type ty118 = `118`
declare isabelle target_rep type ty119 = `119`
declare isabelle target_rep type ty120 = `120`
declare isabelle target_rep type ty121 = `121`
declare isabelle target_rep type ty122 = `122`
declare isabelle target_rep type ty123 = `123`
declare isabelle target_rep type ty124 = `124`
declare isabelle target_rep type ty125 = `125`
declare isabelle target_rep type ty126 = `126`
declare isabelle target_rep type ty127 = `127`
declare isabelle target_rep type ty128 = `128`
declare isabelle target_rep type ty129 = `129`
declare isabelle target_rep type ty130 = `130`
declare isabelle target_rep type ty131 = `131`
declare isabelle target_rep type ty132 = `132`
declare isabelle target_rep type ty133 = `133`
declare isabelle target_rep type ty134 = `134`
declare isabelle target_rep type ty135 = `135`
declare isabelle target_rep type ty136 = `136`
declare isabelle target_rep type ty137 = `137`
declare isabelle target_rep type ty138 = `138`
declare isabelle target_rep type ty139 = `139`
declare isabelle target_rep type ty140 = `140`
declare isabelle target_rep type ty141 = `141`
declare isabelle target_rep type ty142 = `142`
declare isabelle target_rep type ty143 = `143`
declare isabelle target_rep type ty144 = `144`
declare isabelle target_rep type ty145 = `145`
declare isabelle target_rep type ty146 = `146`
declare isabelle target_rep type ty147 = `147`
declare isabelle target_rep type ty148 = `148`
declare isabelle target_rep type ty149 = `149`
declare isabelle target_rep type ty150 = `150`
declare isabelle target_rep type ty151 = `151`
declare isabelle target_rep type ty152 = `152`
declare isabelle target_rep type ty153 = `153`
declare isabelle target_rep type ty154 = `154`
declare isabelle target_rep type ty155 = `155`
declare isabelle target_rep type ty156 = `156`
declare isabelle target_rep type ty157 = `157`
declare isabelle target_rep type ty158 = `158`
declare isabelle target_rep type ty159 = `159`
declare isabelle target_rep type ty160 = `160`
declare isabelle target_rep type ty161 = `161`
declare isabelle target_rep type ty162 = `162`
declare isabelle target_rep type ty163 = `163`
declare isabelle target_rep type ty164 = `164`
declare isabelle target_rep type ty165 = `165`
declare isabelle target_rep type ty166 = `166`
declare isabelle target_rep type ty167 = `167`
declare isabelle target_rep type ty168 = `168`
declare isabelle target_rep type ty169 = `169`
declare isabelle target_rep type ty170 = `170`
declare isabelle target_rep type ty171 = `171`
declare isabelle target_rep type ty172 = `172`
declare isabelle target_rep type ty173 = `173`
declare isabelle target_rep type ty174 = `174`
declare isabelle target_rep type ty175 = `175`
declare isabelle target_rep type ty176 = `176`
declare isabelle target_rep type ty177 = `177`
declare isabelle target_rep type ty178 = `178`
declare isabelle target_rep type ty179 = `179`
declare isabelle target_rep type ty180 = `180`
declare isabelle target_rep type ty181 = `181`
declare isabelle target_rep type ty182 = `182`
declare isabelle target_rep type ty183 = `183`
declare isabelle target_rep type ty184 = `184`
declare isabelle target_rep type ty185 = `185`
declare isabelle target_rep type ty186 = `186`
declare isabelle target_rep type ty187 = `187`
declare isabelle target_rep type ty188 = `188`
declare isabelle target_rep type ty189 = `189`
declare isabelle target_rep type ty190 = `190`
declare isabelle target_rep type ty191 = `191`
declare isabelle target_rep type ty192 = `192`
declare isabelle target_rep type ty193 = `193`
declare isabelle target_rep type ty194 = `194`
declare isabelle target_rep type ty195 = `195`
declare isabelle target_rep type ty196 = `196`
declare isabelle target_rep type ty197 = `197`
declare isabelle target_rep type ty198 = `198`
declare isabelle target_rep type ty199 = `199`
declare isabelle target_rep type ty200 = `200`
declare isabelle target_rep type ty201 = `201`
declare isabelle target_rep type ty202 = `202`
declare isabelle target_rep type ty203 = `203`
declare isabelle target_rep type ty204 = `204`
declare isabelle target_rep type ty205 = `205`
declare isabelle target_rep type ty206 = `206`
declare isabelle target_rep type ty207 = `207`
declare isabelle target_rep type ty208 = `208`
declare isabelle target_rep type ty209 = `209`
declare isabelle target_rep type ty210 = `210`
declare isabelle target_rep type ty211 = `211`
declare isabelle target_rep type ty212 = `212`
declare isabelle target_rep type ty213 = `213`
declare isabelle target_rep type ty214 = `214`
declare isabelle target_rep type ty215 = `215`
declare isabelle target_rep type ty216 = `216`
declare isabelle target_rep type ty217 = `217`
declare isabelle target_rep type ty218 = `218`
declare isabelle target_rep type ty219 = `219`
declare isabelle target_rep type ty220 = `220`
declare isabelle target_rep type ty221 = `221`
declare isabelle target_rep type ty222 = `222`
declare isabelle target_rep type ty223 = `223`
declare isabelle target_rep type ty224 = `224`
declare isabelle target_rep type ty225 = `225`
declare isabelle target_rep type ty226 = `226`
declare isabelle target_rep type ty227 = `227`
declare isabelle target_rep type ty228 = `228`
declare isabelle target_rep type ty229 = `229`
declare isabelle target_rep type ty230 = `230`
declare isabelle target_rep type ty231 = `231`
declare isabelle target_rep type ty232 = `232`
declare isabelle target_rep type ty233 = `233`
declare isabelle target_rep type ty234 = `234`
declare isabelle target_rep type ty235 = `235`
declare isabelle target_rep type ty236 = `236`
declare isabelle target_rep type ty237 = `237`
declare isabelle target_rep type ty238 = `238`
declare isabelle target_rep type ty239 = `239`
declare isabelle target_rep type ty240 = `240`
declare isabelle target_rep type ty241 = `241`
declare isabelle target_rep type ty242 = `242`
declare isabelle target_rep type ty243 = `243`
declare isabelle target_rep type ty244 = `244`
declare isabelle target_rep type ty245 = `245`
declare isabelle target_rep type ty246 = `246`
declare isabelle target_rep type ty247 = `247`
declare isabelle target_rep type ty248 = `248`
declare isabelle target_rep type ty249 = `249`
declare isabelle target_rep type ty250 = `250`
declare isabelle target_rep type ty251 = `251`
declare isabelle target_rep type ty252 = `252`
declare isabelle target_rep type ty253 = `253`
declare isabelle target_rep type ty254 = `254`
declare isabelle target_rep type ty255 = `255`
declare isabelle target_rep type ty256 = `256`
declare isabelle target_rep type ty257 = `257`
declare isabelle target_rep type ty288 = `288`
declare isabelle target_rep type ty320 = `320`
declare isabelle target_rep type ty352 = `352`
declare isabelle target_rep type ty384 = `384`
declare isabelle target_rep type ty416 = `416`
declare isabelle target_rep type ty448 = `448`
declare isabelle target_rep type ty480 = `480`
declare isabelle target_rep type ty512 = `512`
declare isabelle target_rep type ty640 = `640`
declare isabelle target_rep type ty768 = `768`
declare isabelle target_rep type ty896 = `896`
declare isabelle target_rep type ty1024 = `1024`
declare isabelle target_rep type ty1152 = `1152`
declare isabelle target_rep type ty1280 = `1280`
declare isabelle target_rep type ty1408 = `1408`
declare isabelle target_rep type ty1536 = `1536`
declare isabelle target_rep type ty1664 = `1664`
declare isabelle target_rep type ty1792 = `1792`
declare isabelle target_rep type ty1920 = `1920`
declare isabelle target_rep type ty2048 = `2048`
declare isabelle target_rep type ty2304 = `2304`
declare isabelle target_rep type ty2560 = `2560`
declare isabelle target_rep type ty2816 = `2816`
declare isabelle target_rep type ty3072 = `3072`
declare isabelle target_rep type ty3328 = `3328`
declare isabelle target_rep type ty3584 = `3584`
declare isabelle target_rep type ty3840 = `3840`
declare isabelle target_rep type ty4096 = `4096`
declare isabelle target_rep type ty4608 = `4608`
declare isabelle target_rep type ty6400 = `6400`
declare isabelle target_rep type ty8192 = `8192`
declare isabelle target_rep type ty9216 = `9216`
declare isabelle target_rep type ty12800 = `12800`
declare isabelle target_rep type ty12544 = `12544`
declare isabelle target_rep type ty16384 = `16384`
declare isabelle target_rep type ty18432 = `18432`
declare isabelle target_rep type ty20736 = `20736`
declare isabelle target_rep type ty25088 = `25088`
declare isabelle target_rep type ty25600 = `25600`
declare isabelle target_rep type ty30976 = `30976`
declare isabelle target_rep type ty32768 = `32768`
declare isabelle target_rep type ty36864 = `36864`
declare isabelle target_rep type ty41472 = `41472`
declare isabelle target_rep type ty43264 = `43264`
declare isabelle target_rep type ty50176 = `50176`
declare isabelle target_rep type ty51200 = `51200`
declare isabelle target_rep type ty57600 = `57600`
declare isabelle target_rep type ty61952 = `61952`
declare isabelle target_rep type ty65536 = `65536`
declare isabelle target_rep type ty73728 = `73728`
declare isabelle target_rep type ty86528 = `86528`
declare isabelle target_rep type ty100352 = `100352`
declare isabelle target_rep type ty115200 = `115200`
declare isabelle target_rep type ty131072 = `131072`
declare isabelle target_rep type ty262144 = `262144`

declare hol target_rep type ty1 = `1`
declare hol target_rep type ty2 = `2`
declare hol target_rep type ty3 = `3`
declare hol target_rep type ty4 = `4`
declare hol target_rep type ty5 = `5`
declare hol target_rep type ty6 = `6`
declare hol target_rep type ty7 = `7`
declare hol target_rep type ty8 = `8`
declare hol target_rep type ty9 = `9`
declare hol target_rep type ty10 = `10`
declare hol target_rep type ty11 = `11`
declare hol target_rep type ty12 = `12`
declare hol target_rep type ty13 = `13`
declare hol target_rep type ty14 = `14`
declare hol target_rep type ty15 = `15`
declare hol target_rep type ty16 = `16`
declare hol target_rep type ty17 = `17`
declare hol target_rep type ty18 = `18`
declare hol target_rep type ty19 = `19`
declare hol target_rep type ty20 = `20`
declare hol target_rep type ty21 = `21`
declare hol target_rep type ty22 = `22`
declare hol target_rep type ty23 = `23`
declare hol target_rep type ty24 = `24`
declare hol target_rep type ty25 = `25`
declare hol target_rep type ty26 = `26`
declare hol target_rep type ty27 = `27`
declare hol target_rep type ty28 = `28`
declare hol target_rep type ty29 = `29`
declare hol target_rep type ty30 = `30`
declare hol target_rep type ty31 = `31`
declare hol target_rep type ty32 = `32`
declare hol target_rep type ty33 = `33`
declare hol target_rep type ty34 = `34`
declare hol target_rep type ty35 = `35`
declare hol target_rep type ty36 = `36`
declare hol target_rep type ty37 = `37`
declare hol target_rep type ty38 = `38`
declare hol target_rep type ty39 = `39`
declare hol target_rep type ty40 = `40`
declare hol target_rep type ty41 = `41`
declare hol target_rep type ty42 = `42`
declare hol target_rep type ty43 = `43`
declare hol target_rep type ty44 = `44`
declare hol target_rep type ty45 = `45`
declare hol target_rep type ty46 = `46`
declare hol target_rep type ty47 = `47`
declare hol target_rep type ty48 = `48`
declare hol target_rep type ty49 = `49`
declare hol target_rep type ty50 = `50`
declare hol target_rep type ty51 = `51`
declare hol target_rep type ty52 = `52`
declare hol target_rep type ty53 = `53`
declare hol target_rep type ty54 = `54`
declare hol target_rep type ty55 = `55`
declare hol target_rep type ty56 = `56`
declare hol target_rep type ty57 = `57`
declare hol target_rep type ty58 = `58`
declare hol target_rep type ty59 = `59`
declare hol target_rep type ty60 = `60`
declare hol target_rep type ty61 = `61`
declare hol target_rep type ty62 = `62`
declare hol target_rep type ty63 = `63`
declare hol target_rep type ty64 = `64`
declare hol target_rep type ty65 = `65`
declare hol target_rep type ty66 = `66`
declare hol target_rep type ty67 = `67`
declare hol target_rep type ty68 = `68`
declare hol target_rep type ty69 = `69`
declare hol target_rep type ty70 = `70`
declare hol target_rep type ty71 = `71`
declare hol target_rep type ty72 = `72`
declare hol target_rep type ty73 = `73`
declare hol target_rep type ty74 = `74`
declare hol target_rep type ty75 = `75`
declare hol target_rep type ty76 = `76`
declare hol target_rep type ty77 = `77`
declare hol target_rep type ty78 = `78`
declare hol target_rep type ty79 = `79`
declare hol target_rep type ty80 = `80`
declare hol target_rep type ty81 = `81`
declare hol target_rep type ty82 = `82`
declare hol target_rep type ty83 = `83`
declare hol target_rep type ty84 = `84`
declare hol target_rep type ty85 = `85`
declare hol target_rep type ty86 = `86`
declare hol target_rep type ty87 = `87`
declare hol target_rep type ty88 = `88`
declare hol target_rep type ty89 = `89`
declare hol target_rep type ty90 = `90`
declare hol target_rep type ty91 = `91`
declare hol target_rep type ty92 = `92`
declare hol target_rep type ty93 = `93`
declare hol target_rep type ty94 = `94`
declare hol target_rep type ty95 = `95`
declare hol target_rep type ty96 = `96`
declare hol target_rep type ty97 = `97`
declare hol target_rep type ty98 = `98`
declare hol target_rep type ty99 = `99`
declare hol target_rep type ty100 = `100`
declare hol target_rep type ty101 = `101`
declare hol target_rep type ty102 = `102`
declare hol target_rep type ty103 = `103`
declare hol target_rep type ty104 = `104`
declare hol target_rep type ty105 = `105`
declare hol target_rep type ty106 = `106`
declare hol target_rep type ty107 = `107`
declare hol target_rep type ty108 = `108`
declare hol target_rep type ty109 = `109`
declare hol target_rep type ty110 = `110`
declare hol target_rep type ty111 = `111`
declare hol target_rep type ty112 = `112`
declare hol target_rep type ty113 = `113`
declare hol target_rep type ty114 = `114`
declare hol target_rep type ty115 = `115`
declare hol target_rep type ty116 = `116`
declare hol target_rep type ty117 = `117`
declare hol target_rep type ty118 = `118`
declare hol target_rep type ty119 = `119`
declare hol target_rep type ty120 = `120`
declare hol target_rep type ty121 = `121`
declare hol target_rep type ty122 = `122`
declare hol target_rep type ty123 = `123`
declare hol target_rep type ty124 = `124`
declare hol target_rep type ty125 = `125`
declare hol target_rep type ty126 = `126`
declare hol target_rep type ty127 = `127`
declare hol target_rep type ty128 = `128`
declare hol target_rep type ty129 = `129`
declare hol target_rep type ty130 = `130`
declare hol target_rep type ty131 = `131`
declare hol target_rep type ty132 = `132`
declare hol target_rep type ty133 = `133`
declare hol target_rep type ty134 = `134`
declare hol target_rep type ty135 = `135`
declare hol target_rep type ty136 = `136`
declare hol target_rep type ty137 = `137`
declare hol target_rep type ty138 = `138`
declare hol target_rep type ty139 = `139`
declare hol target_rep type ty140 = `140`
declare hol target_rep type ty141 = `141`
declare hol target_rep type ty142 = `142`
declare hol target_rep type ty143 = `143`
declare hol target_rep type ty144 = `144`
declare hol target_rep type ty145 = `145`
declare hol target_rep type ty146 = `146`
declare hol target_rep type ty147 = `147`
declare hol target_rep type ty148 = `148`
declare hol target_rep type ty149 = `149`
declare hol target_rep type ty150 = `150`
declare hol target_rep type ty151 = `151`
declare hol target_rep type ty152 = `152`
declare hol target_rep type ty153 = `153`
declare hol target_rep type ty154 = `154`
declare hol target_rep type ty155 = `155`
declare hol target_rep type ty156 = `156`
declare hol target_rep type ty157 = `157`
declare hol target_rep type ty158 = `158`
declare hol target_rep type ty159 = `159`
declare hol target_rep type ty160 = `160`
declare hol target_rep type ty161 = `161`
declare hol target_rep type ty162 = `162`
declare hol target_rep type ty163 = `163`
declare hol target_rep type ty164 = `164`
declare hol target_rep type ty165 = `165`
declare hol target_rep type ty166 = `166`
declare hol target_rep type ty167 = `167`
declare hol target_rep type ty168 = `168`
declare hol target_rep type ty169 = `169`
declare hol target_rep type ty170 = `170`
declare hol target_rep type ty171 = `171`
declare hol target_rep type ty172 = `172`
declare hol target_rep type ty173 = `173`
declare hol target_rep type ty174 = `174`
declare hol target_rep type ty175 = `175`
declare hol target_rep type ty176 = `176`
declare hol target_rep type ty177 = `177`
declare hol target_rep type ty178 = `178`
declare hol target_rep type ty179 = `179`
declare hol target_rep type ty180 = `180`
declare hol target_rep type ty181 = `181`
declare hol target_rep type ty182 = `182`
declare hol target_rep type ty183 = `183`
declare hol target_rep type ty184 = `184`
declare hol target_rep type ty185 = `185`
declare hol target_rep type ty186 = `186`
declare hol target_rep type ty187 = `187`
declare hol target_rep type ty188 = `188`
declare hol target_rep type ty189 = `189`
declare hol target_rep type ty190 = `190`
declare hol target_rep type ty191 = `191`
declare hol target_rep type ty192 = `192`
declare hol target_rep type ty193 = `193`
declare hol target_rep type ty194 = `194`
declare hol target_rep type ty195 = `195`
declare hol target_rep type ty196 = `196`
declare hol target_rep type ty197 = `197`
declare hol target_rep type ty198 = `198`
declare hol target_rep type ty199 = `199`
declare hol target_rep type ty200 = `200`
declare hol target_rep type ty201 = `201`
declare hol target_rep type ty202 = `202`
declare hol target_rep type ty203 = `203`
declare hol target_rep type ty204 = `204`
declare hol target_rep type ty205 = `205`
declare hol target_rep type ty206 = `206`
declare hol target_rep type ty207 = `207`
declare hol target_rep type ty208 = `208`
declare hol target_rep type ty209 = `209`
declare hol target_rep type ty210 = `210`
declare hol target_rep type ty211 = `211`
declare hol target_rep type ty212 = `212`
declare hol target_rep type ty213 = `213`
declare hol target_rep type ty214 = `214`
declare hol target_rep type ty215 = `215`
declare hol target_rep type ty216 = `216`
declare hol target_rep type ty217 = `217`
declare hol target_rep type ty218 = `218`
declare hol target_rep type ty219 = `219`
declare hol target_rep type ty220 = `220`
declare hol target_rep type ty221 = `221`
declare hol target_rep type ty222 = `222`
declare hol target_rep type ty223 = `223`
declare hol target_rep type ty224 = `224`
declare hol target_rep type ty225 = `225`
declare hol target_rep type ty226 = `226`
declare hol target_rep type ty227 = `227`
declare hol target_rep type ty228 = `228`
declare hol target_rep type ty229 = `229`
declare hol target_rep type ty230 = `230`
declare hol target_rep type ty231 = `231`
declare hol target_rep type ty232 = `232`
declare hol target_rep type ty233 = `233`
declare hol target_rep type ty234 = `234`
declare hol target_rep type ty235 = `235`
declare hol target_rep type ty236 = `236`
declare hol target_rep type ty237 = `237`
declare hol target_rep type ty238 = `238`
declare hol target_rep type ty239 = `239`
declare hol target_rep type ty240 = `240`
declare hol target_rep type ty241 = `241`
declare hol target_rep type ty242 = `242`
declare hol target_rep type ty243 = `243`
declare hol target_rep type ty244 = `244`
declare hol target_rep type ty245 = `245`
declare hol target_rep type ty246 = `246`
declare hol target_rep type ty247 = `247`
declare hol target_rep type ty248 = `248`
declare hol target_rep type ty249 = `249`
declare hol target_rep type ty250 = `250`
declare hol target_rep type ty251 = `251`
declare hol target_rep type ty252 = `252`
declare hol target_rep type ty253 = `253`
declare hol target_rep type ty254 = `254`
declare hol target_rep type ty255 = `255`
declare hol target_rep type ty256 = `256`
declare hol target_rep type ty257 = `257`
declare hol target_rep type ty288 = `288`
declare hol target_rep type ty320 = `320`
declare hol target_rep type ty352 = `352`
declare hol target_rep type ty384 = `384`
declare hol target_rep type ty416 = `416`
declare hol target_rep type ty448 = `448`
declare hol target_rep type ty480 = `480`
declare hol target_rep type ty512 = `512`
declare hol target_rep type ty640 = `640`
declare hol target_rep type ty768 = `768`
declare hol target_rep type ty896 = `896`
declare hol target_rep type ty1024 = `1024`
declare hol target_rep type ty1152 = `1152`
declare hol target_rep type ty1280 = `1280`
declare hol target_rep type ty1408 = `1408`
declare hol target_rep type ty1536 = `1536`
declare hol target_rep type ty1664 = `1664`
declare hol target_rep type ty1792 = `1792`
declare hol target_rep type ty1920 = `1920`
declare hol target_rep type ty2048 = `2048`
declare hol target_rep type ty2304 = `2304`
declare hol target_rep type ty2560 = `2560`
declare hol target_rep type ty2816 = `2816`
declare hol target_rep type ty3072 = `3072`
declare hol target_rep type ty3328 = `3328`
declare hol target_rep type ty3584 = `3584`
declare hol target_rep type ty3840 = `3840`
declare hol target_rep type ty4096 = `4096`
declare hol target_rep type ty4608 = `4608`
declare hol target_rep type ty6400 = `6400`
declare hol target_rep type ty8192 = `8192`
declare hol target_rep type ty9216 = `9216`
declare hol target_rep type ty12800 = `12800`
declare hol target_rep type ty12544 = `12544`
declare hol target_rep type ty16384 = `16384`
declare hol target_rep type ty18432 = `18432`
declare hol target_rep type ty20736 = `20736`
declare hol target_rep type ty25088 = `25088`
declare hol target_rep type ty25600 = `25600`
declare hol target_rep type ty30976 = `30976`
declare hol target_rep type ty32768 = `32768`
declare hol target_rep type ty36864 = `36864`
declare hol target_rep type ty41472 = `41472`
declare hol target_rep type ty43264 = `43264`
declare hol target_rep type ty50176 = `50176`
declare hol target_rep type ty51200 = `51200`
declare hol target_rep type ty57600 = `57600`
declare hol target_rep type ty61952 = `61952`
declare hol target_rep type ty65536 = `65536`
declare hol target_rep type ty73728 = `73728`
declare hol target_rep type ty86528 = `86528`
declare hol target_rep type ty100352 = `100352`
declare hol target_rep type ty115200 = `115200`
declare hol target_rep type ty131072 = `131072`
declare hol target_rep type ty262144 = `262144`

val word_length : forall 'a. mword 'a -> nat
declare ocaml    target_rep function word_length = `Lem.word_length`
declare isabelle target_rep function word_length = `size`
declare hol      target_rep function word_length = `words$word_len`

(******************************************************************)
(* Conversions                                                    *)
(******************************************************************)

val signedIntegerFromWord : forall 'a. mword 'a -> integer

declare isabelle target_rep function signedIntegerFromWord = `Word.sint`
declare hol      target_rep function signedIntegerFromWord = `integer_word$w2i`
declare ocaml    target_rep function signedIntegerFromWord = `Lem.signedIntegerFromWord`

val unsignedIntegerFromWord : forall 'a. mword 'a -> integer

declare isabelle target_rep function unsignedIntegerFromWord = `Word.uint`
declare hol      target_rep function unsignedIntegerFromWord = `lem$w2ui`
declare ocaml    target_rep function unsignedIntegerFromWord = `Lem.naturalFromWord`

(* Version without typeclass constraint so that we can derive operations
   in Lem for one of the theorem provers without requiring it. *)
val proverWordFromInteger : forall 'a. integer -> mword 'a

declare isabelle target_rep function proverWordFromInteger = `Word.word_of_int`
declare hol      target_rep function proverWordFromInteger = `integer_word$i2w`
declare coq      target_rep function proverWordFromInteger = `DAEMON`

val wordFromInteger : forall 'a. Size 'a => integer -> mword 'a

let inline {isabelle;hol;coq} wordFromInteger i = proverWordFromInteger i
(* The OCaml version is defined after the arithmetic operations, below. *)

val naturalFromWord : forall 'a. mword 'a -> natural

declare isabelle target_rep function naturalFromWord = `Word.unat`
declare hol      target_rep function naturalFromWord = `words$w2n`
declare ocaml    target_rep function naturalFromWord = `Lem.naturalFromWord`

val wordFromNatural : forall 'a. Size 'a => natural -> mword 'a

declare hol      target_rep function wordFromNatural = `words$n2w`

let inline {isabelle} wordFromNatural n =
  wordFromInteger (integerFromNatural n)

let {ocaml} wordFromNatural n = ocaml_inject (size, n)

val wordToHex : forall 'a. mword 'a -> string
declare hol target_rep function wordToHex = `words$word_to_hex_string`
(* Building libraries fails if we don't provide implementations for the
   type class. *)
let {ocaml;isabelle;coq} wordToHex w = "wordToHex not yet implemented"

instance forall 'a. (Show (mword 'a))
  let show = wordToHex
end

val wordFromBitlist : forall 'a. Size 'a => list bool -> mword 'a
declare isabelle target_rep function wordFromBitlist = `of_bl`
declare hol      target_rep function wordFromBitlist = `bitstring$v2w`
declare ocaml    target_rep function wordFromBitlist = `Lem.wordFromBitlist`

val bitlistFromWord : forall 'a. mword 'a -> list bool
declare isabelle target_rep function bitlistFromWord = `to_bl`
declare hol      target_rep function bitlistFromWord = `bitstring$w2v`
declare ocaml    target_rep function bitlistFromWord = `Lem.bitlistFromWord`


val size_test_fn : forall 'a. Size 'a => mword 'a -> nat
let size_test_fn _ = size

assert {ocaml;isabelle} size_test : size_test_fn ((wordFromNatural 0) : mword ty5) = 5

assert {ocaml;isabelle;hol} size_itself_test : size_itself (the_value : itself ty7) = 7

assert {ocaml;hol;isabelle} length_test :
  word_length ((wordFromNatural 0) : mword ty13) = 13
assert {ocaml;hol;isabelle} signedIntFromword_test :
  signedIntegerFromWord ((wordFromNatural 130) : mword ty8) = ~126
assert {ocaml;hol;isabelle} wordFromBitlist_test :
  ((wordFromBitlist [false;false;true;false]) : mword ty4) = wordFromNatural 2
assert {ocaml;hol;isabelle} bitlistFromWord_test :
  bitlistFromWord ((wordFromNatural 2) : mword ty4) = [false;false;true;false]
assert {ocaml;hol;isabelle} wordFromBitlist_bitListFromWord_test :
  let w : mword ty8 = wordFromNatural 33 in
  wordFromBitlist (bitlistFromWord w) = w

(******************************************************************)
(* Comparisons                                                    *)
(******************************************************************)

val mwordEq : forall 'a. mword 'a -> mword 'a -> bool
declare ocaml target_rep function mwordEq = `Lem.word_equal`
let inline ~{ocaml} mwordEq = unsafe_structural_equality

instance forall 'a. (Eq (mword 'a))
  let (=)        = mwordEq
  let (<>) w1 w2 = not (mwordEq w1 w2)
end

val signedLess : forall 'a. mword 'a -> mword 'a -> bool

declare isabelle target_rep function signedLess = `Word.word_sless`
declare hol      target_rep function signedLess = `words$word_lt`

val signedLessEq : forall 'a. mword 'a -> mword 'a -> bool

declare isabelle target_rep function signedLessEq = `Word.word_sle`
declare hol      target_rep function signedLessEq = `words$word_le`

val unsignedLess : forall 'a. mword 'a -> mword 'a -> bool

declare isabelle target_rep function unsignedLess = infix `<`
declare hol      target_rep function unsignedLess = `words$word_lo`
declare ocaml    target_rep function unsignedLess = `Lem.unsignedLess`

val unsignedLessEq : forall 'a. mword 'a -> mword 'a -> bool

declare isabelle target_rep function unsignedLessEq = infix `\<le>`
declare hol      target_rep function unsignedLessEq = `words$word_ls`
declare ocaml    target_rep function unsignedLessEq = `Lem.unsignedLessEq`

let {ocaml} signedLess w1 w2 = (signedIntegerFromWord w1) < (signedIntegerFromWord w2)
let {ocaml} signedLessEq w1 w2 = (signedIntegerFromWord w1) <= (signedIntegerFromWord w2)

(* Comparison tests are below, after the definition of wordFromInteger *)

(******************************************************************)
(* Appending, splitting and probing words                         *)
(******************************************************************)

val word_concat : forall 'a 'b 'c. mword 'a -> mword 'b -> mword 'c
declare hol      target_rep function word_concat = `words$word_concat`
declare isabelle target_rep function word_concat = `Word.word_cat`
declare ocaml    target_rep function word_concat = `Lem.word_concat`

(* Note that we assume the result type has the correct size, especially
   for Isabelle. *)
val word_extract : forall 'a 'b. nat -> nat -> mword 'a -> mword 'b
declare hol      target_rep function word_extract lo hi v = `words$word_extract` hi lo v
declare isabelle target_rep function word_extract lo hi v = `Word.slice` lo v
declare ocaml    target_rep function word_extract = `Lem.word_extract`

(*  Needs to be in the prover because we'd end up with unknown sizes in the
   types in Lem.
*)
val word_update : forall 'a 'b. mword 'a -> nat -> nat -> mword 'b -> mword 'a
declare hol      target_rep function word_update v lo hi w = `words$bit_field_insert` hi lo w v
declare isabelle target_rep function word_update v lo hi w = `Lem.word_update` v lo hi w
declare ocaml    target_rep function word_update = `Lem.word_update`

val setBit : forall 'a. mword 'a -> nat -> bool -> mword 'a

declare isabelle target_rep function setBit = `set_bit`
declare hol      target_rep function setBit w i b = `$:+` i b w
declare ocaml    target_rep function setBit = `Lem.word_setBit`

val getBit : forall 'a. mword 'a -> nat -> bool

declare isabelle target_rep function getBit = `bit`
declare hol      target_rep function getBit w b = `words$word_bit` b w
declare ocaml    target_rep function getBit = `Lem.word_getBit`

val msb : forall 'a. mword 'a -> bool

declare isabelle target_rep function msb = `Most_significant_bit.msb`
declare hol      target_rep function msb = `words$word_msb`
declare ocaml    target_rep function msb = `Lem.word_msb`

val lsb : forall 'a. mword 'a -> bool

declare isabelle target_rep function lsb = `Least_significant_bit.lsb`
declare hol      target_rep function lsb = `words$word_lsb`
declare ocaml    target_rep function lsb = `Lem.word_lsb`

assert {ocaml;hol;isabelle} extract_concat_test :
  let x : mword ty16 = wordFromNatural 1234 in
  word_concat ((word_extract 11 15 x) : mword ty5)
              ((word_concat ((word_extract 4 10 x) : mword ty7)
                            ((word_extract 0 3 x) : mword ty4)) : mword ty11)
               = x
assert {ocaml;hol;isabelle} update_test :
  let x : mword ty16 = wordFromNatural 1234 in
  let y : mword ty8 = wordFromNatural 41 in
  word_update x 1 8 y = wordFromNatural 1106
assert {ocaml;hol;isabelle} setBit_test1 : setBit (wordFromNatural 12 : mword ty8) 1  true = wordFromNatural 14
assert {ocaml;hol;isabelle} setBit_test2 : setBit (wordFromNatural 14 : mword ty8) 1 false = wordFromNatural 12
assert {ocaml;hol;isabelle} setBit_test3 : setBit (wordFromNatural 2 : mword ty8) 1 false = wordFromNatural 0
assert {ocaml;hol;isabelle} getBit_test  : getBit (wordFromNatural 3 : mword ty8) 1 = true
assert {ocaml;hol;isabelle} msb_test1    : msb (wordFromNatural 170 : mword ty8) = true
assert {ocaml;hol;isabelle} msb_test2    : msb (wordFromNatural 85  : mword ty8) = false
assert {ocaml;hol;isabelle} lsb_test1    : lsb (wordFromNatural 170 : mword ty8) = false
assert {ocaml;hol;isabelle} lsb_test2    : lsb (wordFromNatural 85  : mword ty8) = true

(******************************************************************)
(* Bitwise operations, shifts, etc.                               *)
(******************************************************************)

val shiftLeft  : forall 'a. mword 'a -> nat -> mword 'a

declare isabelle target_rep function shiftLeft = infix `<<`
declare hol      target_rep function shiftLeft = `words$word_lsl`
declare ocaml    target_rep function shiftLeft = `Lem.word_shiftLeft`

val shiftRight : forall 'a. mword 'a -> nat -> mword 'a

declare isabelle target_rep function shiftRight = infix `>>`
declare hol      target_rep function shiftRight = `words$word_lsr`
declare ocaml    target_rep function shiftRight = `Lem.word_shiftRight`

val arithShiftRight : forall 'a. mword 'a -> nat -> mword 'a

declare isabelle target_rep function arithShiftRight = infix `>>>`
declare hol      target_rep function arithShiftRight = `words$word_asr`
declare ocaml    target_rep function arithShiftRight = `Lem.word_arithShiftRight`

val lAnd       : forall 'a. mword 'a -> mword 'a -> mword 'a

declare isabelle target_rep function lAnd = infix `AND`
declare hol      target_rep function lAnd = `words$word_and`
declare ocaml    target_rep function lAnd = `Lem.word_and`

val lOr        : forall 'a. mword 'a -> mword 'a -> mword 'a

declare isabelle target_rep function lOr = infix `OR`
declare hol      target_rep function lOr = `words$word_or`
declare ocaml    target_rep function lOr = `Lem.word_or`

val lXor       : forall 'a. mword 'a -> mword 'a -> mword 'a

declare isabelle target_rep function lXor = infix `XOR`
declare hol      target_rep function lXor = `words$word_xor`
declare ocaml    target_rep function lXor = `Lem.word_xor`

val lNot       : forall 'a. mword 'a -> mword 'a

declare isabelle target_rep function lNot w = (`NOT` w)
declare hol      target_rep function lNot = `words$word_1comp`
declare ocaml    target_rep function lNot = `Lem.word_not`

val rotateRight : forall 'a. nat -> mword 'a -> mword 'a

declare isabelle target_rep function rotateRight = `Word.word_rotr`
declare hol      target_rep function rotateRight i w = `words$word_ror` w i
declare ocaml    target_rep function rotateRight = `Lem.word_ror`

val rotateLeft : forall 'a. nat -> mword 'a -> mword 'a

declare isabelle target_rep function rotateLeft = `Word.word_rotl`
declare hol      target_rep function rotateLeft i w = `words$word_rol` w i
declare ocaml    target_rep function rotateLeft = `Lem.word_rol`

val zeroExtend : forall 'a 'b. Size 'b => mword 'a -> mword 'b

declare isabelle target_rep function zeroExtend = `Word.ucast`
declare hol      target_rep function zeroExtend = `words$w2w`
let {ocaml} zeroExtend x = wordFromNatural (naturalFromWord x)

val signExtend : forall 'a 'b. Size 'b => mword 'a -> mword 'b

declare isabelle target_rep function signExtend = `Word.scast`
declare hol      target_rep function signExtend = `words$sw2sw`
(* ocaml after definition for wordFromInteger *)

assert {ocaml;hol;isabelle} shift_test1 : shiftLeft (wordFromNatural 5 : mword ty8) 2 = wordFromNatural 20
assert {ocaml;hol;isabelle} shift_test2 : shiftRight (wordFromNatural 5 : mword ty8) 2 = wordFromNatural 1
assert {ocaml;hol;isabelle} shift_test3 : shiftRight (wordFromNatural 129 : mword ty8) 2 = wordFromNatural 32
assert {ocaml;hol;isabelle} shift_test4 : arithShiftRight (wordFromNatural 129 : mword ty8) 2 = wordFromNatural 224
assert {ocaml;hol;isabelle} and_test : lAnd (wordFromNatural 5) (wordFromNatural 36) = (wordFromNatural 4 : mword ty8)
assert {ocaml;hol;isabelle} or_test  : lOr  (wordFromNatural 5) (wordFromNatural 36) = (wordFromNatural 37 : mword ty8)
assert {ocaml;hol;isabelle} xor_test : lXor (wordFromNatural 5) (wordFromNatural 36) = (wordFromNatural 33 : mword ty8)
assert {ocaml;hol;isabelle} not_test : lNot (wordFromNatural 37) = (wordFromNatural 218 : mword ty8)
assert {ocaml;hol;isabelle} rotateR_test : rotateRight 3 (wordFromNatural 37) = (wordFromNatural 164 : mword ty8)
assert {ocaml;hol;isabelle} rotateL_test : rotateLeft 3 (wordFromNatural 37) = (wordFromNatural 41 : mword ty8)
assert {ocaml;hol;isabelle} zext_test_0 : zeroExtend (wordFromNatural 130 : mword ty8) = (wordFromNatural 130 : mword ty16)
assert {ocaml;hol;isabelle} zext_test_1 : zeroExtend (wordFromNatural 130 : mword ty8) = (wordFromNatural 2 : mword ty7)

(* Sign extension tests are below, after the definition of wordFromInteger *)

(*****************************************************************)
(* Arithmetic                                                    *)
(*****************************************************************)

val plus   : forall 'a. mword 'a -> mword 'a -> mword 'a

declare isabelle target_rep function plus = infix `+`
declare hol      target_rep function plus = `words$word_add`
declare ocaml    target_rep function plus = `Lem.word_plus`

val minus  : forall 'a. mword 'a -> mword 'a -> mword 'a

declare isabelle target_rep function minus = infix `-`
declare hol      target_rep function minus = `words$word_sub`
declare ocaml     target_rep function minus = `Lem.word_minus`

val uminus : forall 'a. mword 'a -> mword 'a

declare isabelle target_rep function uminus w = `-` w
declare hol      target_rep function uminus   = `words$word_2comp`
declare ocaml    target_rep function uminus   = `Lem.word_uminus`

val times : forall 'a. mword 'a -> mword 'a -> mword 'a

declare isabelle target_rep function times = infix `*`
declare hol      target_rep function times = `words$word_mul`
declare ocaml    target_rep function times = `Lem.word_times`

val unsignedDivide : forall 'a. mword 'a -> mword 'a -> mword 'a
val signedDivide : forall 'a. mword 'a -> mword 'a -> mword 'a

declare isabelle target_rep function unsignedDivide = infix `div`
declare hol      target_rep function unsignedDivide = `words$word_div`
declare ocaml    target_rep function unsignedDivide = `Lem.word_udiv`

declare isabelle target_rep function signedDivide   = infix `sdiv`
declare hol      target_rep function signedDivide   = `words$word_quot`

let {ocaml} signedDivide x y =
    if msb x then
        if msb y then unsignedDivide (uminus x) (uminus y)
        else uminus (unsignedDivide (uminus x) y)
    else if msb y then uminus (unsignedDivide x (uminus y))
        else unsignedDivide x y

val modulo : forall 'a. mword 'a -> mword 'a -> mword 'a

declare isabelle target_rep function modulo = infix `mod`
declare hol      target_rep function modulo = `words$word_mod`
declare ocaml    target_rep function modulo = `Lem.word_mod`

(* Now we can define wordFromInteger for OCaml *)

let {ocaml} wordFromInteger i =
    if i < 0
    then uminus (wordFromNatural (naturalFromInteger (~i)))
    else wordFromNatural (naturalFromInteger i)

let {ocaml} signExtend x = wordFromInteger (signedIntegerFromWord x)

val wordFromNumeral : forall 'a. Size 'a => numeral -> mword 'a

declare isabelle target_rep function wordFromNumeral n = ``n
declare hol      target_rep function wordFromNumeral n = special "%ew" n
let inline {ocaml;coq} wordFromNumeral n = wordFromInteger (integerFromNumeral n)

instance forall 'a. Size 'a => (Numeral (mword 'a))
  let fromNumeral n = wordFromNumeral n
end

assert {ocaml;hol;isabelle} wordFromInteger_nat_test1 : ((wordFromInteger 42) : mword ty8) = (0x2A : mword ty8)
assert {ocaml;hol;isabelle} wordFromInteger_nat_test2 : ((wordFromInteger (~42)) : mword ty8) = uminus (wordFromNatural 42)

assert {ocaml;hol;isabelle} plus_test : plus (wordFromInteger (~5) : mword ty8) (0b00000010 : mword ty8) = wordFromInteger (~3)
assert {ocaml;hol;isabelle} minus_test : minus (wordFromInteger (~5) : mword ty8) (wordFromNatural 2) = wordFromInteger (~7)
assert {ocaml;hol;isabelle} times_test : times (wordFromInteger (~5) : mword ty8) (wordFromNatural 2) = wordFromInteger (~10)
assert {ocaml;hol;isabelle} udiv_test : unsignedDivide (wordFromInteger (~5) : mword ty8) (wordFromNatural 2) = wordFromInteger 125
assert {ocaml;hol;isabelle} sdiv_test : signedDivide (wordFromInteger (~5) : mword ty8) (wordFromNatural 2) = wordFromInteger 254


(* Comparison tests, which need wordFromInteger *)

assert {ocaml;hol;isabelle} signedLess_test_1 : signedLess (wordFromInteger (~5)) ((wordFromInteger 3) : mword ty8)
assert {ocaml;hol;isabelle} signedLess_test_2 : signedLess (wordFromInteger 3) ((wordFromInteger 5) : mword ty8)
assert {ocaml;hol;isabelle} signedLess_test_3 : not (signedLess (wordFromInteger 3) ((wordFromInteger 3) : mword ty8))
assert {ocaml;hol;isabelle} signedLessEq_test_1 : signedLessEq (wordFromInteger (~5)) ((wordFromInteger 3) : mword ty8)
assert {ocaml;hol;isabelle} signedLessEq_test_2 : signedLessEq (wordFromInteger 3) ((wordFromInteger 5) : mword ty8)
assert {ocaml;hol;isabelle} signedLessEq_test_3 : signedLessEq (wordFromInteger 3) ((wordFromInteger 3) : mword ty8)
assert {ocaml;hol;isabelle} unsignedLess_test_1 : unsignedLess (wordFromInteger 3) ((wordFromInteger 5) : mword ty8)
assert {ocaml;hol;isabelle} unsignedLess_test_2 : unsignedLess (wordFromInteger 3) ((wordFromInteger 255) : mword ty8)
assert {ocaml;hol;isabelle} unsignedLess_test_3 : not (unsignedLess (wordFromInteger 255) ((wordFromInteger 255) : mword ty8))
assert {ocaml;hol;isabelle} unsignedLessEq_test_1 : unsignedLessEq (wordFromInteger 3) ((wordFromInteger 5) : mword ty8)
assert {ocaml;hol;isabelle} unsignedLessEq_test_2 : unsignedLessEq (wordFromInteger 3) ((wordFromInteger 255) : mword ty8)
assert {ocaml;hol;isabelle} unsignedLessEq_test_3 : unsignedLessEq (wordFromInteger 255) ((wordFromInteger 255) : mword ty8)

(* Bitwise tests which need wordFromInteger *)

assert {ocaml;hol;isabelle} signed_shift_test1 : shiftLeft ((wordFromInteger (~1)) : mword ty8) 2 = wordFromNatural 252

(* sign extend tests *)

assert {ocaml;hol;isabelle} sext_test_0 : signExtend (wordFromNatural 130 : mword ty8) = (wordFromInteger (~126) : mword ty16)
assert {ocaml;hol;isabelle} sext_test_1 : signExtend (wordFromNatural 130 : mword ty8) = (wordFromInteger 2 : mword ty7)
