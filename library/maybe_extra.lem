(******************************************************************************)
(* extra functions for maybe / option                                         *)
(*                                                                            *)
(******************************************************************************)

declare {isabelle;hol;ocaml;coq} rename module = lem_maybe_extra 

open import Basic_classes Maybe Assert_extra

(* ----------------------- *)
(* fromJust                *)
(* ----------------------- *)

val fromJust : forall 'a. maybe 'a -> 'a
let fromJust op = match op with | Just v -> v | Nothing -> failwith "fromJust of Nothing" end
declare termination_argument fromJust = automatic
declare compile_message fromJust = "fromJust is only defined on Just. Better use `fromMaybe` or use explicit matching to handle the Nothing-case."

declare hol      target_rep function fromJust = `THE`
declare isabelle target_rep function fromJust = `Option.the`

